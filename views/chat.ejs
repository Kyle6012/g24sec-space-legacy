<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Chat with <%= receiver.username %></title>
  <link rel="stylesheet" href="/css/chat.ejs.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/theme.js"></script>
  <script src="/js/yt.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <style>
    /* Message status styles */
    .message-footer {
      display: flex;
      align-items: center;
      justify-content: flex-end;
      margin-top: 4px;
    }
    
    .timestamp {
      font-size: 0.75rem;
      color: #999;
      margin-right: 5px;
    }
    
    .message-status {
      font-size: 0.75rem;
      color: #999;
      display: inline-flex;
      align-items: center;
    }
    
    .message-status .seen {
      color: #3897f0;
    }
    
    /* Typing indicator */
    .typing-indicator {
      display: none;
      padding: 8px 12px;
      margin: 5px;
      border-radius: 18px;
      background-color: #f1f1f1;
      color: #555;
      font-size: 0.9rem;
      max-width: 80%;
      align-self: flex-start;
    }
    
    /* Dark mode styles */
    .dark-mode .typing-indicator {
      background-color: #333;
      color: #ddd;
    }
    
    .dark-mode .timestamp {
      color: #aaa;
    }
    
    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(5px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .message-container {
      animation: fadeIn 0.3s ease-out;
    }
  </style>
</head>
<body class="light-mode">
  <%- include('partials/navbar') %>

  <div class="chat-container">
    <!-- Chat Header -->
    <div class="chat-header">
      <a href="/profile/<%= receiver.username %>">
        <img src="<%= receiver.profilePic || '/images/default.png' %>" alt="Profile Picture" class="chat-profile-pic">
      </a>
      <h2 class="chat-username"><%= receiver.username %></h2>
      <span id="online-status" class="online-indicator"></span>
    </div>

    <!-- Chat Messages -->
    <div class="chat-box" id="chat-box">
      <% messages.forEach(msg => { %>
        <div class="message-container <%= msg.senderId === receiver.id ? 'received' : 'sent' %>" data-message-id="<%= msg.id %>">
          <div class="message">
            <p class="message-text"><%= msg.message %></p>
            <div class="message-footer">
              <span class="timestamp"><%= new Date(msg.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %></span>
              <% if (msg.senderId !== receiver.id) { %>
                <span class="message-status">
                  <% if (msg.isRead) { %>
                    <span class="seen">✓✓</span>
                  <% } else { %>
                    ✓
                  <% } %>
                </span>
              <% } %>
            </div>
          </div>
        </div>
      <% }); %>
      <div id="typing-indicator" class="typing-indicator">
        <div class="typing-dots">
          <span></span>
          <span></span>
          <span></span>
        </div>
      </div>
    </div>

    <!-- Message Input -->
    <form id="chat-form" class="chat-form">
      <input type="text" id="message-input" placeholder="Type a message..." autocomplete="off" required>
      <button type="submit" aria-label="Send message">
        <i class="fas fa-paper-plane"></i>
      </button>
    </form>
  </div>

  <!-- Audio elements for notifications -->
  <audio id="msgSentSound" src="/sound/message-sent.mp3" preload="auto"></audio>
  <audio id="msgIncomingSound" src="/sound/message-incoming.mp3" preload="auto"></audio>
  <audio id="notificationSound" src="/sound/message-notification.mp3" preload="auto"></audio>

  <script>
    // Initialize socket connection
    const socket = io({ withCredentials: true });
    const chatBox = document.getElementById('chat-box');
    const form = document.getElementById('chat-form');
    const input = document.getElementById('message-input');
    const receiverId = "<%= receiver.id %>";
    const isAI = "<%= receiver.username %>" === "g24_ai";
    const typingIndicator = document.getElementById('typing-indicator');
    const onlineStatus = document.getElementById('online-status');
    const typingDelay = 3000;
    let typingTimeout;
    let isTyping = false;

    // Scroll to bottom of chat
    function scrollChatToBottom() {
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    // Check if element is in viewport
    function isElementInViewport(el) {
      const rect = el.getBoundingClientRect();
      return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.right <= (window.innerWidth || document.documentElement.clientWidth)
      );
    }

    // Mark messages as read when they become visible
    function markVisibleMessagesAsRead() {
      const messages = document.querySelectorAll('.message-container.received');
      messages.forEach(msg => {
        if (isElementInViewport(msg)) {
          const messageId = msg.dataset.messageId;
          if (messageId) {
            socket.emit('markAsRead', messageId);
          }
        }
      });
    }

    // Handle form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const message = input.value.trim();
      if (message) {
        socket.emit('sendMessage', { message, receiverId });
        
        // Create temporary message element
        const tempId = 'temp-' + Date.now();
        const msgContainer = document.createElement('div');
        msgContainer.classList.add('message-container', 'sent');
        msgContainer.dataset.tempId = tempId;
        msgContainer.innerHTML = `
          <div class="message">
            <p class="message-text">${message}</p>
            <div class="message-footer">
              <span class="timestamp">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
              <span class="message-status">✓</span>
            </div>
          </div>`;
        
        chatBox.insertBefore(msgContainer, typingIndicator);
        scrollChatToBottom();
        input.value = '';
        
        if (isTyping) {
          socket.emit('stopTyping', { receiverId });
          isTyping = false;
        }
        
        document.getElementById('msgSentSound').play();
      }
    });

    // Handle received messages
    socket.on('receiveMessage', (data) => {
      const directionClass = data.isOwnMessage ? 'sent' : 'received';
      const statusIcon = data.isOwnMessage ? 
        `<span class="message-status">${data.isRead ? '<span class="seen">✓✓</span>' : '✓'}</span>` : 
        '';
      
      const msgContainer = document.createElement('div');
      msgContainer.classList.add('message-container', directionClass);
      msgContainer.dataset.messageId = data.id;
      msgContainer.innerHTML = `
        <div class="message">
          <p class="message-text">${data.message}</p>
          <div class="message-footer">
            <span class="timestamp">${new Date(data.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
            ${statusIcon}
          </div>
        </div>`;
      
      // Replace temporary message if exists
      const tempMsg = document.querySelector(`[data-temp-id^="temp-"]`);
      if (tempMsg && data.isOwnMessage) {
        chatBox.replaceChild(msgContainer, tempMsg);
      } else {
        chatBox.insertBefore(msgContainer, typingIndicator);
      }
      
      scrollChatToBottom();
      
      // Play sound and show notification for received messages
      if (!data.isOwnMessage) {
        document.getElementById('msgIncomingSound').play();
        
        // Mark as read after 1 second if visible
        setTimeout(() => {
          if (isElementInViewport(msgContainer)) {
            socket.emit('markAsRead', data.id);
          }
        }, 1000);
        
        // Show desktop notification if tab is not active
        if (document.hidden) {
          document.getElementById('notificationSound').play();
          if (Notification.permission === "granted") {
            new Notification(`New message from ${data.senderId === receiverId ? '<%= receiver.username %>' : 'You'}`, { 
              body: data.message,
              icon: '<%= receiver.profilePic || "/images/default.png" %>'
            });
          } else if (Notification.permission !== "denied") {
            Notification.requestPermission().then(permission => {
              if (permission === "granted") {
                new Notification(`New message from ${data.senderId === receiverId ? '<%= receiver.username %>' : 'You'}`, { 
                  body: data.message,
                  icon: '<%= receiver.profilePic || "/images/default.png" %>'
                });
              }
            });
          }
        }
      }
    });

    // Handle message read status updates
    socket.on('messageRead', (data) => {
      const message = document.querySelector(`[data-message-id="${data.messageId}"]`);
      if (message) {
        const statusElement = message.querySelector('.message-status');
        if (statusElement) {
          statusElement.innerHTML = '<span class="seen">✓✓</span>';
        }
      }
    });

    // Handle typing indicators
    socket.on('displayTyping', (data) => {
      if (data.senderId === receiverId) {
        typingIndicator.style.display = 'block';
        scrollChatToBottom();
      }
    });

    socket.on('hideTyping', (data) => {
      if (data.senderId === receiverId) {
        typingIndicator.style.display = 'none';
      }
    });

    // Handle online status updates
    socket.on('updateOnlineUsers', (onlineUsers) => {
      if (onlineUsers.includes("<%= receiver.id %>")) {
        onlineStatus.style.display = 'inline-block';
        onlineStatus.title = 'Online now';
      } else {
        onlineStatus.style.display = 'none';
        onlineStatus.title = 'Offline';
      }
    });

    // Handle input events for typing indicators
    input.addEventListener('input', () => {
      if (!isTyping) {
        socket.emit('typing', { receiverId });
        isTyping = true;
      }
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(() => {
        socket.emit('stopTyping', { receiverId });
        isTyping = false;
      }, typingDelay);
    });

    // Mark messages as read when they become visible
    chatBox.addEventListener('scroll', markVisibleMessagesAsRead);
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) {
        markVisibleMessagesAsRead();
      }
    });

    // Initial scroll to bottom
    scrollChatToBottom();
    
    // Mark all existing messages as read if they're visible
    setTimeout(() => {
      markVisibleMessagesAsRead();
    }, 1000);
  </script>
</body>
</html>
